class Node{
    constructor(val){
        this.val=val;
        this.next=null
        
    }
}

// var first=new Node("Hi");
// first.next=new Node("Hello");
// first.next.next=new Node("How");
// first.next.next.next=new Node("are");
// first.next.next.next.next=new Node("you");

class singlyLinkedList{
    constructor(){
        this.head=null
        this.tail=null
        this.length=0
        
    }

    push(val){
        var newNode= new Node(val)
        if(!this.head){
            this.head=newNode;
            this.tail=this.head
        }else{
            this.tail.next=newNode
            this.tail=newNode
        }
        this.length++;
        return this
    }
    traverse(){
        var current=this.head;
        while(current){
            console.log(current.val);
            current=current.next
        }
    }
   // remove node from the last
    pop(){
        if(!this.head) return undefined;
        var current=this.head;
        var newTail=current;
        while(current.next){
            newTail=current;
            current=current.next;
        }
        // console.log(newTail.val);
        // console.log(current.val);
        this.tail=newTail;
        this.tail.next=null;
        this.length--;
        if(this.length===0){
            this.head=null
            this.tail=null
        }
        return current;


    }
       // remove node from the first
    shift(){
        if(!this.head) return undefined;
         var currentHead=this.head;
        this.head=currentHead.next;
        this.length--;
         if(this.length===0){
            this.tail=null
        }
        return currentHead;
        
    }
}

var list = new singlyLinkedList()
list.push("Hello");
list.push("How");
list.push("are")
list.push("you")
