class Node{
    constructor(val){
        this.val=val;
        this.next=null
        
    }
}

// var first=new Node("Hi");
// first.next=new Node("Hello");
// first.next.next=new Node("How");
// first.next.next.next=new Node("are");
// first.next.next.next.next=new Node("you");

class singlyLinkedList{
    constructor(){
        this.head=null
        this.tail=null
        this.length=0
        
    }

    push(val){
        var newNode= new Node(val)
        if(!this.head){
            this.head=newNode;
            this.tail=this.head
        }else{
            this.tail.next=newNode
            this.tail=newNode
        }
        this.length++;
        return this
    }
    traverse(){
        var current=this.head;
        while(current){
            console.log(current.val);
            current=current.next
        }
    }
   // remove node from the last
    pop(){
        if(!this.head) return undefined;
        var current=this.head;
        var newTail=current;
        while(current.next){
            newTail=current;
            current=current.next;
        }
        // console.log(newTail.val);
        // console.log(current.val);
        this.tail=newTail;
        this.tail.next=null;
        this.length--;
        if(this.length===0){
            this.head=null
            this.tail=null
        }
        return current;


    }
       // remove node from the first
    shift(){
        if(!this.head) return undefined;
         var currentHead=this.head;
        this.head=currentHead.next;
        this.length--;
         if(this.length===0){
            this.tail=null
        }
        return currentHead;
        
    }

    unshift(val){
        var newNode=new Node(val)
        if(!this.head){
            this.head=newNode
            this.tail=this.head
        }
        else{
             newNode.next=this.head;
             this.head=newNode;
        }
       
        this.length++
        return this
    }
    get(index){
        if(index<0 || index>=this.length) return null
        var counter=0;
        var current=this.head
        while(counter!==index){
            current=current.next;
            counter++
        }
        return current;
    }

    set(index, val){
        var foundNode=this.get(index)
        if(foundNode){
            foundNode.val=val;
            return true;
        }
        return false
    }   
    insert(index,val){
        if(index < 0 || index > this.length) return false;
        if(index===this.length) return !! this.push(val);
        if(index===0) return !! this.unshift(val)
        var newNode= new Node(val);
        var pre=this.get(index-1)
        var temp=pre.next;
        pre.next=newNode;
        newNode.next=temp;
        this.length++
        return true
    }
    remove(index){
        if(index < 0 || index >= this.length) return undefined;
        if(index===this.length-1) return !! this.pop();
        if(index===0) return !! this.shift();
        var preNode=this.get(index-1);
        var deletedNode=preNode.next;
        preNode.next=deletedNode.next;
        this.length--;
        return deletedNode;
    }
    reverse(){
        var node=this.head;
       this.head=this.tail;
        this.tail=node;
        var next;
        var pre=null;
       for(var i=0; i<this.length;i++){
           next=node.next;
           node.next=pre;
           pre=node;
           node=next;
       }
        return this;
        
    }

    print(){
        var arr=[];
        var current=this.head;
        while(current){
            arr.push(current.val)
            current=current.next;
        }
        console.log(arr)
        
    }
}

var list = new singlyLinkedList()
list.push(100);
list.push(200);
list.push(300)
list.push(400)
